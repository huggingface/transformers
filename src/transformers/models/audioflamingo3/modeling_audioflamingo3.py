#                ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨
#           This file was automatically generated from src/transformers/models/audioflamingo3/modular_audioflamingo3.py.
#               Do NOT edit this file manually as any edits will be overwritten by the generation of
#             the file from the modular. If any change should be done, please apply the change to the
#                          modular_audioflamingo3.py file directly. One of our CI enforces this.
#                ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨
# coding=utf-8
# Copyright 2025 NVIDIA CORPORATION and the HuggingFace Inc. team. All rights
# reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import math
from dataclasses import dataclass
from typing import Callable, Optional, Union

import torch
from torch import nn

from ...activations import ACT2FN
from ...cache_utils import Cache, EncoderDecoderCache
from ...generation import GenerationMixin
from ...modeling_flash_attention_utils import FlashAttentionKwargs
from ...modeling_layers import GradientCheckpointingLayer
from ...modeling_outputs import BaseModelOutput, ModelOutput
from ...modeling_utils import ALL_ATTENTION_FUNCTIONS, PreTrainedModel
from ...processing_utils import Unpack
from ...utils import logging
from ...utils.deprecation import deprecate_kwarg
from ..auto import AutoModelForCausalLM
from .configuration_audioflamingo3 import AudioFlamingo3Config, AudioFlamingo3EncoderConfig


logger = logging.get_logger(__name__)


# --------------------------------------------------------------------------
# Outputs
# --------------------------------------------------------------------------


@dataclass
class AudioFlamingo3CausalLMOutputWithPast(ModelOutput):
    """
    Output type of :class:`~transformers.AudioFlamingo3ForConditionalGeneration`.

    Args:
        loss (`torch.FloatTensor`, *optional*):
            Next-token prediction loss (returned when `labels` is provided).
        logits (`torch.FloatTensor`, *optional*):
            Scores for each vocabulary token before SoftMax,
            shape `(batch_size, sequence_length, vocab_size)`.
        past_key_values (`Cache`, *optional*):
            Cache to speed up autoregressive decoding.
        hidden_states (`tuple(torch.FloatTensor)`, *optional*):
            Hidden states of the language model.
        attentions (`tuple(torch.FloatTensor)`, *optional*):
            Attention maps of the language model.
        attention_mask (`torch.FloatTensor`, *optional*):
            Attention mask passed to the language model.
    """

    loss: Optional[torch.FloatTensor] = None
    logits: Optional[torch.FloatTensor] = None
    past_key_values: Optional[Cache] = None
    hidden_states: Optional[tuple[torch.FloatTensor, ...]] = None
    attentions: Optional[tuple[torch.FloatTensor, ...]] = None
    attention_mask: Optional[torch.FloatTensor] = None


def eager_attention_forward(
    module: nn.Module,
    query: torch.Tensor,
    key: torch.Tensor,
    value: torch.Tensor,
    attention_mask: Optional[torch.Tensor],
    scaling: Optional[float] = None,
    dropout: float = 0.0,
    head_mask: Optional[torch.Tensor] = None,
    **kwargs,
):
    if scaling is None:
        scaling = query.size(-1) ** -0.5

    attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
    if attention_mask is not None and attention_mask.ndim == 4:
        attn_weights = attn_weights + attention_mask[:, :, :, : key.shape[-2]]

    attn_weights = nn.functional.softmax(attn_weights, dim=-1)

    if head_mask is not None:
        attn_weights = attn_weights * head_mask.view(1, -1, 1, 1)

    attn_weights = nn.functional.dropout(attn_weights, p=dropout, training=module.training)
    attn_output = torch.matmul(attn_weights, value)
    attn_output = attn_output.transpose(1, 2).contiguous()

    return attn_output, attn_weights


class AudioFlamingo3Attention(nn.Module):
    """Alias of WhisperAttention kept for configuration/splitting consistency."""

    def __init__(
        self,
        embed_dim: int,
        num_heads: int,
        dropout: float = 0.0,
        is_decoder: bool = False,
        bias: bool = True,
        is_causal: bool = False,
        layer_idx: Optional[int] = None,
        config: Optional[AudioFlamingo3Config] = None,
    ):
        super().__init__()
        self.embed_dim = embed_dim
        self.num_heads = num_heads
        self.dropout = dropout
        self.head_dim = embed_dim // num_heads
        self.config = config

        if (self.head_dim * num_heads) != self.embed_dim:
            raise ValueError(
                f"embed_dim must be divisible by num_heads (got `embed_dim`: {self.embed_dim}"
                f" and `num_heads`: {num_heads})."
            )
        self.scaling = self.head_dim**-0.5
        self.is_decoder = is_decoder
        self.is_causal = is_causal

        if layer_idx is None and is_decoder:
            logger.warning_once(
                f"Instantiating a decoder {self.__class__.__name__} without passing `layer_idx` is not recommended and "
                "will to errors during the forward call, if caching is used. Please make sure to provide a `layer_idx` "
                "when creating this class."
            )
        self.layer_idx = layer_idx

        self.k_proj = nn.Linear(embed_dim, embed_dim, bias=False)
        self.v_proj = nn.Linear(embed_dim, embed_dim, bias=bias)
        self.q_proj = nn.Linear(embed_dim, embed_dim, bias=bias)
        self.out_proj = nn.Linear(embed_dim, embed_dim, bias=bias)

    @deprecate_kwarg("past_key_value", new_name="past_key_values", version="4.58")
    def forward(
        self,
        hidden_states: torch.Tensor,
        key_value_states: Optional[torch.Tensor] = None,
        past_key_values: Optional[Cache] = None,
        attention_mask: Optional[torch.Tensor] = None,
        layer_head_mask: Optional[torch.Tensor] = None,
        output_attentions: bool = False,
        cache_position: Optional[torch.Tensor] = None,
        # TODO: we need a refactor so that the different attention modules can get their specific kwargs
        # ATM, we have mixed things encoder, decoder, and encoder-decoder attn
        **kwargs: Unpack[FlashAttentionKwargs],
    ) -> tuple[torch.Tensor, Optional[torch.Tensor], Optional[tuple[torch.Tensor]]]:
        """Input shape: Batch x Time x Channel"""

        # if key_value_states are provided this layer is used as a cross-attention layer
        # for the decoder
        is_cross_attention = key_value_states is not None

        # determine input shapes
        bsz, tgt_len = hidden_states.shape[:-1]
        q_input_shape = (bsz, tgt_len, -1, self.head_dim)

        # Scaling is susceptible to floating point arithmetics' inprecisions
        # which can lead to different results (this is dependent from model
        # to model, e.g. audioflamingo3 is one such case). We therefore keep the
        # original order of scaling to follow the original implementation
        # and enforce no scaling (1.0) in the attention call below.
        query_states = self.q_proj(hidden_states) * self.scaling
        query_states = query_states.view(*q_input_shape)
        query_states = query_states.transpose(1, 2).contiguous()

        # Check is encoder-decoder model is being used. Otherwise we'll get `DynamicCache`
        if past_key_values is not None and isinstance(past_key_values, EncoderDecoderCache):
            is_updated = past_key_values.is_updated.get(self.layer_idx)
            if is_cross_attention:
                # after the first generated id, we can subsequently re-use all key/value_states from cache
                past_key_values.is_updated[self.layer_idx] = True
                past_key_values = past_key_values.cross_attention_cache
            else:
                past_key_values = past_key_values.self_attention_cache

        # use key_value_states if cross attention
        current_states = key_value_states if key_value_states is not None else hidden_states
        if is_cross_attention and past_key_values and is_updated:
            # reuse k,v, cross_attentions
            key_states = past_key_values.layers[self.layer_idx].keys
            value_states = past_key_values.layers[self.layer_idx].values
        else:
            key_states = self.k_proj(current_states).view(bsz, -1, self.num_heads, self.head_dim)
            value_states = self.v_proj(current_states).view(bsz, -1, self.num_heads, self.head_dim)
            key_states = key_states.transpose(1, 2).contiguous()
            value_states = value_states.transpose(1, 2).contiguous()
            if past_key_values is not None:
                # save all key/value_states to cache to be re-used for fast auto-regressive generation
                cache_position = cache_position if not is_cross_attention else None
                key_states, value_states = past_key_values.update(
                    key_states, value_states, self.layer_idx, {"cache_position": cache_position}
                )

        attention_interface: Callable = eager_attention_forward
        if self.config._attn_implementation != "eager":
            attention_interface = ALL_ATTENTION_FUNCTIONS[self.config._attn_implementation]

        attn_output, attn_weights = attention_interface(
            self,
            query_states,
            key_states,
            value_states,
            attention_mask,
            dropout=0.0 if not self.training else self.dropout,
            scaling=1.0,
            output_attentions=output_attentions,
            head_mask=layer_head_mask,
            **kwargs,
        )

        attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        attn_output = self.out_proj(attn_output)

        return attn_output, attn_weights


class AudioFlamingo3EncoderLayer(GradientCheckpointingLayer):
    """Alias of WhisperEncoderLayer kept for configuration/splitting consistency."""

    def __init__(self, config: AudioFlamingo3Config):
        super().__init__()
        self.embed_dim = config.d_model

        self.self_attn = AudioFlamingo3Attention(
            embed_dim=self.embed_dim,
            num_heads=config.encoder_attention_heads,
            dropout=config.attention_dropout,
            config=config,
        )
        self.self_attn_layer_norm = nn.LayerNorm(self.embed_dim)
        self.dropout = config.dropout
        self.activation_fn = ACT2FN[config.activation_function]
        self.activation_dropout = config.activation_dropout
        self.fc1 = nn.Linear(self.embed_dim, config.encoder_ffn_dim)
        self.fc2 = nn.Linear(config.encoder_ffn_dim, self.embed_dim)
        self.final_layer_norm = nn.LayerNorm(self.embed_dim)

    def forward(
        self,
        hidden_states: torch.Tensor,
        attention_mask: torch.Tensor,
        layer_head_mask: torch.Tensor,
        output_attentions: bool = False,
    ) -> torch.Tensor:
        """
        Args:
            hidden_states (`torch.FloatTensor`): input to the layer of shape `(batch, seq_len, embed_dim)`
            attention_mask (`torch.FloatTensor`): attention mask of size
                `(batch, 1, tgt_len, src_len)` where padding elements are indicated by very large negative values.
            layer_head_mask (`torch.FloatTensor`): mask for attention heads in a given layer of size
                `(encoder_attention_heads,)`.
            output_attentions (`bool`, *optional*):
                Whether or not to return the attentions tensors of all attention layers. See `attentions` under
                returned tensors for more detail.
        """
        residual = hidden_states
        hidden_states = self.self_attn_layer_norm(hidden_states)
        hidden_states, attn_weights = self.self_attn(
            hidden_states=hidden_states,
            attention_mask=attention_mask,
            layer_head_mask=layer_head_mask,
            output_attentions=output_attentions,
        )
        hidden_states = nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)
        hidden_states = residual + hidden_states

        residual = hidden_states
        hidden_states = self.final_layer_norm(hidden_states)
        hidden_states = self.activation_fn(self.fc1(hidden_states))
        hidden_states = nn.functional.dropout(hidden_states, p=self.activation_dropout, training=self.training)
        hidden_states = self.fc2(hidden_states)
        hidden_states = nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)
        hidden_states = residual + hidden_states

        if hidden_states.dtype == torch.float16:
            clamp_value = torch.finfo(hidden_states.dtype).max - 1000
            hidden_states = torch.clamp(hidden_states, min=-clamp_value, max=clamp_value)

        return hidden_states, attn_weights


# --------------------------------------------------------------------------
# Base model
# --------------------------------------------------------------------------


class AudioFlamingo3PreTrainedModel(PreTrainedModel):
    """
    Base class with common functionality for AudioFlamingo3 models.
    """

    config_class = AudioFlamingo3Config
    base_model_prefix = "model"
    supports_gradient_checkpointing = True
    _no_split_modules = ["AudioFlamingo3Attention"]
    _skip_keys_device_placement = "past_key_values"
    _supports_flash_attn = True
    _supports_sdpa = True

    def _init_weights(self, module: nn.Module) -> None:
        # Initialize modules following config.init_std; used for fine-tuning/inference scaffolding.
        std = getattr(self.config, "init_std", None)
        if std is None and hasattr(self.config, "audio_config"):
            std = getattr(self.config.audio_config, "init_std", 0.02)

        if isinstance(module, (nn.Linear, nn.Conv1d)):
            module.weight.data.normal_(mean=0.0, std=std)
            if module.bias is not None:
                module.bias.data.zero_()
        elif isinstance(module, nn.LayerNorm):
            module.weight.data.fill_(1.0)
            module.bias.data.zero_()
        elif isinstance(module, nn.Embedding):
            module.weight.data.normal_(mean=0.0, std=std)
            if module.padding_idx is not None:
                module.weight.data[module.padding_idx].zero_()


class AudioFlamingo3Encoder(AudioFlamingo3PreTrainedModel):
    """
    Audio encoder: Whisper conv front-end, Transformer encoder, average pool (time/2), then LayerNorm.

    Expects `attention_mask` to be `None` or a 4D mask `(B, 1, S, S)` on the *pre-pool* time axis with `-inf` on pads.
    """

    config: AudioFlamingo3EncoderConfig
    main_input_name = "input_features"
    _no_split_modules = ["AudioFlamingo3EncoderLayer"]

    def __init__(self, config: AudioFlamingo3EncoderConfig):
        super().__init__(config)
        self.dropout = config.dropout
        self.layerdrop = config.encoder_layerdrop

        embed_dim = config.d_model
        self.num_mel_bins = config.num_mel_bins
        self.padding_idx = config.pad_token_id
        self.max_source_positions = config.max_source_positions
        self.embed_scale = math.sqrt(embed_dim) if config.scale_embedding else 1.0

        self.conv1 = nn.Conv1d(self.num_mel_bins, embed_dim, kernel_size=3, padding=1)
        self.conv2 = nn.Conv1d(embed_dim, embed_dim, kernel_size=3, stride=2, padding=1)

        self.embed_positions = nn.Embedding(self.max_source_positions, embed_dim)
        self.embed_positions.requires_grad_(False)

        self.layers = nn.ModuleList([AudioFlamingo3EncoderLayer(config) for _ in range(config.encoder_layers)])
        self.layer_norm = nn.LayerNorm(config.d_model)

        self.gradient_checkpointing = False
        self.avg_pooler = nn.AvgPool1d(config.avg_pool_kernel_size, stride=config.avg_pool_stride)
        # Initialize weights and apply final processing
        self.post_init()

    def _freeze_parameters(self):
        for param in self.parameters():
            param.requires_grad = False
        self._requires_grad = False

    def get_input_embeddings(self) -> nn.Module:
        return self.conv1

    def set_input_embeddings(self, value: nn.Module):
        self.conv1 = value

    def forward(
        self,
        input_features: torch.Tensor,
        attention_mask: Optional[torch.Tensor] = None,
        head_mask: Optional[torch.Tensor] = None,
        output_attentions: Optional[bool] = None,
        output_hidden_states: Optional[bool] = None,
        return_dict: Optional[bool] = None,
    ) -> Union[BaseModelOutput, tuple]:
        r"""
        Args:
            input_features (`torch.LongTensor` of shape `(batch_size, feature_size, sequence_length)`):
                Float values of mel features extracted from the raw speech waveform. Raw speech waveform can be
                obtained by loading a `.flac` or `.wav` audio file into an array of type `list[float]`, a
                `numpy.ndarray` or a `torch.Tensor`, *e.g.* via the torchcodec library (`pip install torchcodec`) or
                the soundfile library (`pip install soundfile`). To prepare the array into
                `input_features`, the [`AutoFeatureExtractor`] should be used for extracting the mel features, padding
                and conversion into a tensor of type `torch.FloatTensor`. See [`~AudioFlamingo3FeatureExtractor.__call__`]
            attention_mask (`torch.Tensor`)`, *optional*):
                AudioFlamingo3 does not support masking of the `input_features`, this argument is preserved for compatibility,
                but it is not used. By default the silence in the input log mel spectrogram are ignored.
            head_mask (`torch.Tensor` of shape `(encoder_layers, encoder_attention_heads)`, *optional*):
                Mask to nullify selected heads of the attention modules. Mask values selected in `[0, 1]`:

                - 1 indicates the head is **not masked**,
                - 0 indicates the head is **masked**.
            output_attentions (`bool`, *optional*):
                Whether or not to return the attentions tensors of all attention layers. See `attentions` under
                returned tensors for more detail.
            output_hidden_states (`bool`, *optional*):
                Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors
                for more detail.
            return_dict (`bool`, *optional*):
                Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
        """
        output_attentions = self.config.output_attentions if output_attentions is None else output_attentions
        output_hidden_states = (
            self.config.output_hidden_states if output_hidden_states is None else output_hidden_states
        )
        return_dict = self.config.use_return_dict if return_dict is None else return_dict

        input_features = input_features.to(dtype=self.conv1.weight.dtype, device=self.conv1.weight.device)

        # Conv front-end
        x = nn.functional.gelu(self.conv1(input_features))
        x = nn.functional.gelu(self.conv2(x))  # (B, C, T')

        # Add positions, dropout
        x = x.permute(0, 2, 1)  # (B, S_in, C)
        pos = self.embed_positions.weight
        if pos.shape[0] < x.shape[1]:
            raise ValueError(f"embed_positions shorter than sequence length: {pos.shape[0]} < {x.shape[1]}")
        x = nn.functional.dropout(x + pos[: x.shape[1]], p=self.dropout, training=self.training)

        # Transformer stack
        hs_list = [] if output_hidden_states else None
        attn_list = [] if output_attentions else None
        h = x
        for idx, layer in enumerate(self.layers):
            if output_hidden_states:
                hs_list.append(h)
            to_drop = self.training and (torch.rand([]) < self.layerdrop)
            if to_drop:
                out = (h, None)
            else:
                out = layer(
                    h,
                    attention_mask,
                    layer_head_mask=(head_mask[idx] if head_mask is not None else None),
                    output_attentions=output_attentions,
                )
                h = out[0]
            if output_attentions:
                attn_list.append(out[1])

        # AvgPool (time/2) + LayerNorm
        prepool = h
        h = h.permute(0, 2, 1)
        h = self.avg_pooler(h).permute(0, 2, 1)  # (B, S_out, C)
        h = self.layer_norm(h)

        if output_hidden_states:
            hs_list.append(prepool)
            hs_list.append(h)

        if not return_dict:
            outs = (
                h,
                tuple(hs_list) if hs_list is not None else None,
                tuple(attn_list) if attn_list is not None else None,
            )
            return tuple(v for v in outs if v is not None)

        return BaseModelOutput(
            last_hidden_state=h,
            hidden_states=tuple(hs_list) if hs_list is not None else None,
            attentions=tuple(attn_list) if attn_list is not None else None,
        )

    def _get_feat_extract_output_lengths(self, input_lengths: torch.LongTensor):
        """
        Compute (pre-conv) and (post-pool) sequence lengths given mel frame lengths.
        Matches the conv/pool schedule used in `forward`.
        """
        input_lengths = (input_lengths - 1) // 2 + 1
        output_lengths = (input_lengths - 2) // 2 + 1
        return input_lengths, output_lengths


# --------------------------------------------------------------------------
# Projector
# --------------------------------------------------------------------------


class AudioFlamingo3MultiModalProjector(nn.Module):
    """
    Audio adaptor (a small MLP) that projects AudioFlamingo3Encoder (AF-Whisper)
    features to the LLM embedding space so they can replace `<sound>` tokens.
    """

    def __init__(self, config: AudioFlamingo3Config) -> None:
        super().__init__()
        d_audio = config.audio_config.d_model
        d_text = config.text_config.hidden_size
        self.layers = nn.ModuleList([nn.Linear(d_audio, d_text), nn.GELU(), nn.Linear(d_text, d_text)])

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        for layer in self.layers:
            x = layer(x)
        return x


# --------------------------------------------------------------------------
# Conditional generation model
# --------------------------------------------------------------------------


class AudioFlamingo3ForConditionalGeneration(AudioFlamingo3PreTrainedModel, GenerationMixin):
    """
    AudioFlamingo3 model composed of an audio encoder, a projection to the LM hidden size, and a causal LM.

    The audio-text fusion is performed by *replacing* occurrences of the `<sound>` token with per-frame audio embeddings,
    without changing sequence length. The number of `<sound>` tokens is expected to match the *post-pool* frame count
    computed by the processor.
    """

    config_class = AudioFlamingo3Config

    def __init__(self, config: AudioFlamingo3Config):
        super().__init__(config)
        # Language model
        self.language_model = AutoModelForCausalLM.from_config(config.text_config)
        # Audio encoder (explicitly instantiate our class to guarantee helper availability)
        self.audio_tower = AudioFlamingo3Encoder(config.audio_config)
        # Projection to LM hidden size
        self.multi_modal_projector = AudioFlamingo3MultiModalProjector(config)

        self.post_init()

    # --- Embedding plumbing (forward to LM) ---
    def get_input_embeddings(self):
        return self.language_model.get_input_embeddings()

    def set_input_embeddings(self, value):
        self.language_model.set_input_embeddings(value)

    def get_output_embeddings(self):
        return self.language_model.get_output_embeddings()

    def set_output_embeddings(self, value):
        self.language_model.set_output_embeddings(value)

    def set_decoder(self, decoder):
        self.language_model.set_decoder(decoder)

    def get_decoder(self):
        return self.language_model.get_decoder()

    def forward(
        self,
        input_ids: Optional[torch.LongTensor] = None,
        input_features: Optional[torch.FloatTensor] = None,  # (#windows, n_mels, T_mel)
        attention_mask: Optional[torch.Tensor] = None,  # (B, L)
        feature_attention_mask: Optional[torch.Tensor] = None,  # (#windows, T_mel)
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[Cache] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
        labels: Optional[torch.LongTensor] = None,
        use_cache: Optional[bool] = None,
        output_attentions: Optional[bool] = None,
        output_hidden_states: Optional[bool] = None,
        return_dict: Optional[bool] = None,
        cache_position: Optional[torch.LongTensor] = None,
    ) -> Union[tuple, AudioFlamingo3CausalLMOutputWithPast]:
        output_attentions = self.config.output_attentions if output_attentions is None else output_attentions
        output_hidden_states = (
            self.config.output_hidden_states if output_hidden_states is None else output_hidden_states
        )
        return_dict = self.config.use_return_dict if return_dict is None else return_dict

        # Text embeddings
        if inputs_embeds is None:
            inputs_embeds = self.get_input_embeddings()(input_ids)

        # Replace <sound> token slots with audio features (no length change)
        if input_features is not None and input_ids is not None and input_ids.shape[1] != 1:
            dev = next(self.audio_tower.parameters()).device

            input_features = input_features.to(dev)
            if feature_attention_mask is None:
                raise ValueError("`feature_attention_mask` is required when `input_features` is provided.")
            feature_attention_mask = feature_attention_mask.to(dev)

            # Compute pre/post lengths (mel -> conv -> pool)
            Lmel = feature_attention_mask.sum(-1)  # (#windows,)
            pre_lengths, post_lengths = self.audio_tower._get_feat_extract_output_lengths(Lmel)
            pre_lengths = pre_lengths.to(dtype=torch.long)
            post_lengths = post_lengths.to(dtype=torch.long)

            # Build 4D encoder mask on pre-pool axis with -inf on pads
            _, _, T_mel_max = input_features.shape
            S_in_max = (T_mel_max - 1) // 2 + 1
            seq = (
                torch.arange(S_in_max, dtype=torch.long, device=pre_lengths.device)
                .unsqueeze(0)
                .expand(pre_lengths.shape[0], S_in_max)
            )
            pad_bool = seq >= pre_lengths.unsqueeze(1)  # (N, S_in_max)
            enc_mask_bool = pad_bool.view(pre_lengths.shape[0], 1, 1, S_in_max).expand(
                pre_lengths.shape[0], 1, S_in_max, S_in_max
            )
            enc_mask = enc_mask_bool.to(dtype=self.audio_tower.conv1.weight.dtype, device=dev)
            enc_mask[enc_mask_bool] = float("-inf")

            # Encode audio -> project -> flatten valid frames
            enc_out = self.audio_tower(input_features, attention_mask=enc_mask)
            post = enc_out.last_hidden_state  # (#windows, S_out, C)
            audio_feats = self.multi_modal_projector(post)  # (#windows, S_out, D)

            N, S_out_max, D = audio_feats.shape
            valid_mask = torch.arange(S_out_max, device=post_lengths.device)[None, :] < post_lengths[:, None]
            flat_audio = audio_feats[valid_mask]  # (sum(post_lengths), D)

            # --- Scatter into <sound> slots ---
            # Build a boolean mask over token positions where we should inject audio frames
            special_ids_mask = input_ids == self.config.audio_token_id  # (B, L)
            n_audio_tokens = int(special_ids_mask.sum().item())
            n_audio_frames = int(flat_audio.shape[0])
            if n_audio_tokens != n_audio_frames:
                raise ValueError(
                    f"Audio tokens and features mismatch: tokens={n_audio_tokens}, frames={n_audio_frames}. "
                    "Ensure the processor expands <sound> by the post-pool frame count."
                )

            # Expand mask to embedding dimension and scatter the flattened audio features
            special_mask = special_ids_mask.unsqueeze(-1).expand(-1, -1, D)  # (B, L, D)
            src = flat_audio.to(inputs_embeds.device, dtype=inputs_embeds.dtype).reshape(-1)  # (n_audio_tokens * D,)
            inputs_embeds = inputs_embeds.masked_scatter(special_mask, src)

        # Language model forward
        outputs = self.language_model(
            inputs_embeds=inputs_embeds,
            attention_mask=attention_mask,
            past_key_values=past_key_values,
            use_cache=use_cache,
            output_attentions=output_attentions,
            output_hidden_states=output_hidden_states,
            return_dict=return_dict,
            cache_position=cache_position,
        )
        logits = outputs[0]

        # Optional loss
        loss = None
        if labels is not None:
            if attention_mask is not None:
                shift_attention_mask = attention_mask[..., 1:]
                shift_logits = logits[..., :-1, :][shift_attention_mask.to(logits.device) != 0].contiguous()
                shift_labels = labels[..., 1:][shift_attention_mask.to(labels.device) != 0].contiguous()
            else:
                shift_logits = logits[..., :-1, :].contiguous()
                shift_labels = labels[..., 1:].contiguous()
            loss_fct = nn.CrossEntropyLoss()
            loss = loss_fct(
                shift_logits.view(-1, shift_logits.size(-1)), shift_labels.view(-1).to(shift_logits.device)
            )

        if not return_dict:
            output = (logits,) + outputs[1:]
            return (loss,) + output if loss is not None else output

        return AudioFlamingo3CausalLMOutputWithPast(
            loss=loss,
            logits=logits,
            past_key_values=outputs.past_key_values,
            hidden_states=outputs.hidden_states,
            attentions=outputs.attentions,
            attention_mask=attention_mask,
        )

    # --- Generation helpers ---
    def prepare_inputs_for_generation(self, *args, **kwargs):
        """
        Pass `input_features`/`feature_attention_mask` only on the first step of generation.
        """
        input_features = kwargs.pop("input_features", None)
        feature_attention_mask = kwargs.pop("feature_attention_mask", None)
        model_inputs = super().prepare_inputs_for_generation(*args, **kwargs)

        is_first = model_inputs.get("past_key_values", None) is None or (
            isinstance(model_inputs.get("cache_position", None), torch.Tensor)
            and model_inputs["cache_position"].numel() > 0
            and int(model_inputs["cache_position"][0].item()) == 0
        )
        if is_first:
            if input_features is not None:
                model_inputs["input_features"] = input_features
            if feature_attention_mask is not None:
                model_inputs["feature_attention_mask"] = feature_attention_mask
        return model_inputs


__all__ = ["AudioFlamingo3ForConditionalGeneration", "AudioFlamingo3PreTrainedModel", "AudioFlamingo3Encoder"]
