#                ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨
#           This file was automatically generated from src/transformers/models/timesfm_2p5/modular_timesfm_2p5.py.
#               Do NOT edit this file manually as any edits will be overwritten by the generation of
#             the file from the modular. If any change should be done, please apply the change to the
#                          modular_timesfm_2p5.py file directly. One of our CI enforces this.
#                ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨ğŸš¨
# coding=utf-8
# Copyright 2025 the HuggingFace Team. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import Optional

from ...configuration_utils import PretrainedConfig


class Timesfm2P5Config(PretrainedConfig):
    """Configuration class for TimesFM 2.5 model."""

    model_type = "timesfm_2p5"
    keys_to_ignore_at_inference = []
    is_encoder_decoder = False

    def __init__(
        self,
        # TimesFM 2.5 specific parameters
        patch_length: int = 32,
        context_length: int = 16384,
        horizon_length: int = 128,
        quantiles: list = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
        pad_val: float = -1e9,
        freq_size: int = 10,  # Not used in 2.5, but kept for compatibility
        hidden_size: int = 1280,
        intermediate_size: int = 1280,
        head_dim: int = 80,
        num_attention_heads: int = 16,
        num_key_value_heads: int = 16,  # Same as num_attention_heads for full attention
        tolerance: float = 1e-5,
        rms_norm_eps: float = 1e-6,
        attention_dropout: float = 0.0,
        attention_bias: bool = False,
        initializer_range: float = 0.02,
        min_timescale: float = 1.0,
        max_timescale: float = 10000.0,
        # Override defaults for 2.5
        num_hidden_layers: int = 20,
        output_quantile_len: int = 1024,  # From original TimesFM 2.5 config
        decode_index: int = 5,
        use_rotary_embeddings: bool = True,
        use_qk_norm: bool = True,
        use_per_dim_scale: bool = True,
        use_bias: bool = False,
        activation: str = "swish",
        use_positional_embedding: bool = False,  # TimesFM 2.5 uses rotary embeddings instead
        use_continuous_quantile_head: bool = True,
        normalize_inputs: bool = True,
        # Gemma2-compatible parameters for query scaling
        query_pre_attn_scalar: float = 256.0,  # This provides the per-dim scaling
        attn_logit_softcapping: Optional[float] = None,
        layer_types: Optional[list] = None,  # All layers are the same type
        sliding_window: Optional[int] = None,  # No sliding window
        max_position_embeddings: int = 16384,  # Should match context_length
        rope_theta: float = 10000.0,  # RoPE theta parameter
        **kwargs,
    ):
        super().__init__(
            is_encoder_decoder=self.is_encoder_decoder,
            **kwargs,
        )
        self.patch_length = patch_length
        self.context_length = context_length
        self.horizon_length = horizon_length
        self.quantiles = quantiles
        self.pad_val = pad_val
        self.freq_size = freq_size
        self.hidden_size = hidden_size
        self.intermediate_size = intermediate_size
        self.head_dim = head_dim
        self.num_hidden_layers = num_hidden_layers
        self.num_attention_heads = num_attention_heads
        self.tolerance = tolerance
        self.rms_norm_eps = rms_norm_eps
        self.attention_dropout = attention_dropout
        self.use_positional_embedding = use_positional_embedding
        self.initializer_range = initializer_range
        self.min_timescale = min_timescale
        self.max_timescale = max_timescale
        self.output_quantile_len = output_quantile_len
        self.decode_index = decode_index
        self.use_rotary_embeddings = use_rotary_embeddings
        self.use_qk_norm = use_qk_norm
        self.use_per_dim_scale = use_per_dim_scale
        self.use_bias = use_bias
        self.activation = activation
        self.use_continuous_quantile_head = use_continuous_quantile_head
        self.normalize_inputs = normalize_inputs
        self.query_pre_attn_scalar = query_pre_attn_scalar
        self.attn_logit_softcapping = attn_logit_softcapping
        self.num_key_value_heads = num_key_value_heads
        self.attention_bias = attention_bias
        self.layer_types = layer_types or ["attention"] * num_hidden_layers
        self.sliding_window = sliding_window
        self.max_position_embeddings = max_position_embeddings
        self.rope_theta = rope_theta


__all__ = ["Timesfm2P5Config"]
