#                🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨
#           This file was automatically generated from src/transformers/models/deepseek_vl_v2/modular_deepseek_vl_v2.py.
#               Do NOT edit this file manually as any edits will be overwritten by the generation of
#             the file from the modular. If any change should be done, please apply the change to the
#                          modular_deepseek_vl_v2.py file directly. One of our CI enforces this.
#                🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨
import torch

from ...image_processing_utils import BatchFeature
from ...processing_utils import ProcessorMixin

chat_template = """
{%- set sep = "\n\n" -%}
{%- set sep2 = "<｜end▁of▁sentence｜>" -%}

{%- if messages[0].role == "system" %}
{{ messages[0].content + sep }}
{%- else %}
{%- set system_message = "" %}
{%- endif %}

{%- for message in messages if message.role != "system" %}
    {%- set role = "<|User|>" if message.role == "user" else "<|Assistant|>" %}
    {%- if message.content %}
        {%- set content = message.content -%}
        {%- if content is not string -%}
            {%- set text_content = [] -%}
            {%- for part in content -%}
                {%- set text_content = text_content + [part.text] -%}
            {%- endfor -%}
            {%- set content = "".join(text_content) -%}
        {%- endif -%}
        {{ role + ": " + content }}
        {{ sep if loop.index0 is even else sep2 }}
    {%- else %}
        {{ role + ":" }}
    {%- endif %}
{%- endfor %}

{%- if add_generation_prompt %}
<|Assistant|>:
{%- endif %}
"""

class DeepseekVLV2Processor(ProcessorMixin):
    r"""
    Constructs a DeepseekVLV2 processor which wraps a DeepseekVLV2 Image Processor and a Llama tokenizer into a single processor.

    [`DeepseekVLV2Processor`] offers all the functionalities of [`DeepseekVLV2ImageProcessor`] and [`LlamaTokenizerFast`]. See the
    [`~DeepseekVLV2Processor.__call__`] and [`~DeepseekVLV2Processor.decode`] for more information.

    Args:
        image_processor ([`DeepseekVLV2ImageProcessor`]):
            The image processor is a required input.
        tokenizer ([`LlamaTokenizerFast`]):
            The tokenizer is a required input.
        chat_template (`str`, *optional*):
            A Jinja template which will be used to convert lists of messages
            in a chat into a tokenizable string.
        num_image_tokens (`int`, *optional*, defaults to 576):
            The number of special image tokens used as placeholders for visual content in text sequences.
    """

    attributes = ["image_processor", "tokenizer"]
    image_processor_class = "DeepseekVLV2ImageProcessor"
    tokenizer_class = "AutoTokenizer"

    def __init__(
        self,
        image_processor,
        tokenizer,
        chat_template=chat_template,
    ):
        super().__init__(image_processor, tokenizer, chat_template=chat_template)
        self.image_token = "<image>"
        self.image_token_id = self.tokenizer.vocab.get(self.image_token)
        self.tokenizer.chat_template = chat_template
        special_tokens = ["<|ref|>", "<|/ref|>", "<|det|>", "<|/det|>", "<|grounding|>"]
        special_tokens_dict = {"additional_special_tokens": special_tokens}
        self.tokenizer.add_special_tokens(special_tokens_dict)

    def __call__(
        self,
        conversation,
        images=None,
        tokenize=True,
        return_tensors="pt",
        **kwargs,
    ) -> BatchFeature:
        """
        Main method to prepare for the model one or several sequences(s) and image(s). This method forwards the `text`
        and `kwargs` arguments to LlamaTokenizerFast's [`~LlamaTokenizerFast.__call__`] if `text` is not `None` to encode
        the text. To prepare the image(s), this method forwards the `images` and `kwargs` arguments to
        DeepseekVLV2ImageProcessor's [`~DeepseekVLV2ImageProcessor.__call__`] if `images` is not `None`. Please refer to the doctsring
        of the above two methods for more information.

        Args:
            text (`str`, `List[str]`, `List[List[str]]`):
                The sequence or batch of sequences to be encoded. Each sequence can be a string or a list of strings
                (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set
                `is_split_into_words=True` (to lift the ambiguity with a batch of sequences).
            images (`PIL.Image.Image`, `np.ndarray`, `torch.Tensor`, `List[PIL.Image.Image]`, `List[np.ndarray]`, `List[torch.Tensor]`):
                The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
                tensor. Both channels-first and channels-last formats are supported.
            return_tensors (`str` or [`~utils.TensorType`], *optional*):
                If set, will return tensors of a particular framework. Acceptable values are:
                - `'pt'`: Return PyTorch `torch.Tensor` objects.
                - `'np'`: Return NumPy `np.ndarray` objects.

        Returns:
            [`BatchFeature`]: A [`BatchFeature`] with the following fields:

            - **input_ids** -- List of token ids to be fed to a model. Returned when `text` is not `None`.
            - **attention_mask** -- List of indices specifying which tokens should be attended to by the model (when
              `return_attention_mask=True` or if *"attention_mask"* is in `self.model_input_names` and if `text` is not
              `None`).
            - **pixel_values** -- Pixel values to be fed to a model. Returned when `images` is not `None`.
        """
        prompt = self.apply_chat_template(conversation, **kwargs)

        if not tokenize:
            return prompt

        batch_pixel_values = []
        batch_spatial_crops = []

        for img in images:
            out = self.image_processor.preprocess(img)
            batch_pixel_values.append(out["pixel_values"])
            batch_spatial_crops.append(
                [out["num_width_tiles"], out["num_height_tiles"]]
            )

        max_tiles = max(pv.shape[0] for pv in batch_pixel_values)
        padded_pixel_values = torch.zeros(
            len(batch_pixel_values), max_tiles, 3, 384, 384
        )
        for i, pv in enumerate(batch_pixel_values):
            padded_pixel_values[i, : pv.shape[0]] = pv

        images_spatial_crop = torch.zeros(
            len(batch_spatial_crops), max_tiles, 2, dtype=torch.long
        )
        for i, (w, h) in enumerate(batch_spatial_crops):
            images_spatial_crop[i, 0] = torch.tensor([w, h])

        expanded_prompt = prompt
        for w, h in batch_spatial_crops:
            num_tokens = (h * 14) * (w * 14 + 1) + 210 + 1
            expanded_prompt = expanded_prompt.replace(
                self.image_token, self.image_token * num_tokens, 1
            )

        enc = self.tokenizer(expanded_prompt, return_tensors=return_tensors)

        image_token_id = self.tokenizer.convert_tokens_to_ids(self.image_token)
        images_seq_mask = (enc["input_ids"] == image_token_id).to(torch.bool)

        labels = enc["input_ids"].clone()
        labels[labels == self.tokenizer.pad_token_id] = -100

        return BatchFeature(
            {
                "input_ids": enc["input_ids"],
                "labels": labels,
                "attention_mask": enc["attention_mask"],
                "pixel_values": padded_pixel_values,
                "images_spatial_crop": images_spatial_crop,
                "images_seq_mask": images_seq_mask,
            }
        )

    def batch_decode(self, *args, **kwargs):
        """
        This method forwards all its arguments to LlamaTokenizerFast's [`~PreTrainedTokenizer.batch_decode`]. Please
        refer to the docstring of this method for more information.
        """
        return self.tokenizer.batch_decode(*args, **kwargs)

    def decode(self, *args, **kwargs):
        """
        This method forwards all its arguments to LlamaTokenizerFast's [`~PreTrainedTokenizer.decode`]. Please refer to
        the docstring of this method for more information.
        """
        return self.tokenizer.decode(*args, **kwargs)

    @property
    def model_input_names(self):
        tokenizer_input_names = self.tokenizer.model_input_names
        image_processor_input_names = self.image_processor.model_input_names
        return list(dict.fromkeys(tokenizer_input_names + image_processor_input_names))


__all__ = ["DeepseekVLV2Processor"]
