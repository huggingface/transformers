#                ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨
#           This file was automatically generated from src/transformers/models/keye_vl_1_5/modular_keye_vl_1_5.py.
#               Do NOT edit this file manually as any edits will be overwritten by the generation of
#             the file from the modular. If any change should be done, please apply the change to the
#                          modular_keye_vl_1_5.py file directly. One of our CI enforces this.
#                ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨
# coding=utf-8
# Copyright 2025 The Kwai Keye Team and The HuggingFace Inc. team. All rights reserved.
#
# This code is based on EleutherAI's GPT-NeoX library and the GPT-NeoX
# and OPT implementations in this library. It has been modified from its
# original forms to accommodate minor architectural differences compared
# to GPT-NeoX and OPT used by the Meta AI team that trained the model.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


from copy import deepcopy
from typing import Optional, Union

import torch
import torch.nn.functional as F

from ...image_processing_utils import BatchFeature
from ...image_utils import ImageInput
from ...models.qwen2.tokenization_qwen2_fast import Qwen2TokenizerFast
from ...processing_utils import ProcessingKwargs, ProcessorMixin, Unpack, VideosKwargs
from ...tokenization_utils_base import PreTokenizedInput, TextInput
from ...video_utils import VideoInput
from .image_processing_keye_vl_1_5 import KeyeVL1_5ImageProcessor
from .video_processing_keye_vl_1_5 import KeyeVL1_5VideoProcessor


class KeyeVL1_5VideosProcessorKwargs(VideosKwargs, total=False):
    fps: Optional[Union[list[float], float]]
    """
    the fps of the video.
    """
    width: Optional[Union[list[int], int]]
    """
    the width to resize in for slow frames.
    """
    height: Optional[Union[list[int], int]]
    """
    the height to resize in for slow frames.
    """
    fast_width: Optional[Union[list[int], int]]
    """
    the width to resize in for fast frames.
    """
    fast_height: Optional[Union[list[int], int]]
    """
    the height to resize in for fast frames.
    """
    timestamps: Optional[Union[list[torch.Tensor], torch.Tensor]]
    """
    used to mark the timestamp of each frame, the quantity is equal to the number of frames.
    """
    frame_types: Optional[Union[list[torch.Tensor], torch.Tensor]]
    """
    used to mark whether each frame is of type slow or fast, where 0 for alow and 1 for fast.
    """


class KeyeVL1_5ProcessorKwargs(ProcessingKwargs, total=False):
    videos_kwargs: KeyeVL1_5VideosProcessorKwargs
    _defaults = {
        "text_kwargs": {
            "padding": False,
        },
        "videos_kwargs": {"fps": 2.0},
    }


def split_thw(thw: torch.LongTensor) -> torch.LongTensor:
    """
    Split grid_thw in t dimension, the result tensor should like [[1, h, w],...]
    Example:

    ```python
    >>> thw = torch.LongTensor([[2, 10, 12], [3, 4, 6]])
    >>> split_thw(thw) -> torch.LongTensor([[1, 10, 12], [1, 10, 12], [1, 4, 6], [1, 4, 6], [1, 4, 6]])
    """
    if thw.dim() == 1:
        thw = thw.unsqueeze(0)

    clone = thw.clone()
    clone[:, 0] = 1
    return torch.repeat_interleave(clone, thw[:, 0], dim=0)


def merge_thw(
    thw: Union[torch.LongTensor, list[torch.LongTensor]],
    num_frames: Optional[list[int]] = None,
) -> torch.LongTensor:
    """
    Merge same grid_thw in t dimension, if num_frames is provided, may split adjacent identical values.
    Example:

    ```python
    >>> thw = torch.LongTensor([[1, 3, 4], [1, 3, 4], [1, 3, 4], [1, 23, 10], [1, 89, 18], [1, 9, 10], [1, 9, 10]])
    >>> num_frames = None
    >>> merge_thw(thw, num_frames) -> torch.LongTensor([3, 3, 4], [1, 23, 10], [1, 89, 18], [2, 9, 10]])

    >>> thw = torch.LongTensor([[1, 3, 4], [1, 3, 4], [1, 3, 4], [1, 23, 10], [1, 89, 18], [1, 9, 10], [1, 9, 10]])
    >>> num_frames = [2, 1, 3, 1]
    >>> merge_thw(thw, num_frames) -> torch.LongTensor([2, 3, 4], [1, 3, 4], [1, 23, 10], [1, 89, 18], [1, 9, 10], [1, 9, 10]])

    Args:
        thw (torch.LongTensor, List[torch.LongTensor]): A tensor of shape (N, 3) or a list of (3, ) tensor with lengths N, the value of t dimension is always 1.
        num_frames (List[int]): Indicates the number of frames in each video.

    Returns:
        torch.LongTensor: A tensor merged adjacent identical values.
    """

    if isinstance(thw, list):
        thw = torch.stack(thw, dim=0)

    if thw.dim() != 2:
        raise ValueError(f"`thw` must be a tensor with dim 2, but got shape {thw.shape}")

    if not torch.all(thw[:, 0] == 1):
        raise ValueError("`thw` must be a tensor where the first value in each row is 1.")

    if num_frames is None:
        mask = (thw[:-1] != thw[1:]).any(1)
        mask = F.pad(mask, (1, 0), value=True)

        indices = torch.where(mask)[0]
        append = torch.LongTensor([mask.shape[0]])
        count = torch.diff(indices, append=append).unsqueeze(-1)
        return torch.concat([count, thw[indices][:, 1:]], dim=1)

    if thw.shape[0] != sum(num_frames):
        raise ValueError(
            f"The length of `thw` must equals to sum of `num_frames`, but the shape of `thw` is {thw.shape}, `num_frames` = {num_frames}."
        )

    return torch.concat([merge_thw(part) for part in thw.split(num_frames, dim=0)], dim=0)


class KeyeVL1_5Processor(ProcessorMixin):
    r"""
    [`KeyeVL1_5Processor`] offers all the functionalities of [`KeyeVL1_5ImageProcessor`] and [`Qwen2TokenizerFast`]. See the
    [`~KeyeVL1_5Processor.__call__`] and [`~KeyeVL1_5Processor.decode`] for more information.
    Args:
        image_processor ([`KeyeVL1_5ImageProcessor`], *optional*):
            The image processor is a required input.
        tokenizer ([`Qwen2TokenizerFast`], *optional*):
            The tokenizer is a required input.
        video_processor ([`KeyeVL1_5VideoProcessor`], *optional*):
            The video processor is a required input.
        chat_template (`str`, *optional*): A Jinja template which will be used to convert lists of messages
            in a chat into a tokenizable string.
    """

    attributes = ["image_processor", "tokenizer", "video_processor"]

    image_processor_class = "AutoImageProcessor"
    video_processor_class = "AutoVideoProcessor"
    tokenizer_class = "AutoTokenizer"

    def __init__(
        self,
        image_processor: Optional[KeyeVL1_5ImageProcessor] = None,
        tokenizer: Optional[Qwen2TokenizerFast] = None,
        video_processor: Optional[KeyeVL1_5VideoProcessor] = None,
        chat_template: Optional[str] = None,
        **kwargs,
    ):
        self.image_token = tokenizer.image_token
        self.video_token = tokenizer.video_token
        self.frame_token = tokenizer.frame_token
        self.fast_start = tokenizer.fast_start
        self.fast_end = tokenizer.fast_end

        super().__init__(image_processor, tokenizer, video_processor, chat_template=chat_template)

    def __call__(
        self,
        text: Union[TextInput, PreTokenizedInput, list[TextInput], list[PreTokenizedInput]] = None,
        images: Optional[ImageInput] = None,
        videos: Optional[VideoInput] = None,
        **kwargs: Unpack[KeyeVL1_5ProcessorKwargs],
    ) -> BatchFeature:
        """
        Main method to prepare for the model one or several sequences(s) and image(s). This method forwards the `text`
        and `kwargs` arguments to Qwen2TokenizerFast's [`~Qwen2TokenizerFast.__call__`] if `text` is not `None` to encode
        the text. To prepare the vision inputs, this method forwards the `vision_infos` and `kwrags` arguments to
        KeyeVL1_5ImageProcessor's [`~KeyeVL1_5ImageProcessor.__call__`] if `vision_infos` is not `None`.

        Args:
            text (`str`, `List[str]`, `List[List[str]]`):
                The sequence or batch of sequences to be encoded. Each sequence can be a string or a list of strings
                (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set
                `is_split_into_words=True` (to lift the ambiguity with a batch of sequences).
            images (`PIL.Image.Image`, `np.ndarray`, `torch.Tensor`, `List[PIL.Image.Image]`, `List[np.ndarray]`, `List[torch.Tensor]`):
                The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
                tensor. Both channels-first and channels-last formats are supported.
            videos (`np.ndarray`, `torch.Tensor`, `List[np.ndarray]`, `List[torch.Tensor]`):
                The image or batch of videos to be prepared. Each video can be a 4D NumPy array or PyTorch
                tensor, or a nested list of 3D frames. Both channels-first and channels-last formats are supported.
            return_tensors (`str` or [`~utils.TensorType`], *optional*):
                If set, will return tensors of a particular framework. Acceptable values are:
                - `'tf'`: Return TensorFlow `tf.constant` objects.
                - `'pt'`: Return PyTorch `torch.Tensor` objects.
                - `'np'`: Return NumPy `np.ndarray` objects.
                - `'jax'`: Return JAX `jnp.ndarray` objects.

        Returns:
            [`BatchFeature`]: A [`BatchFeature`] with the following fields:

            - **input_ids** -- Tensor of token ids to be fed to a model. Returned when `text` is not `None`.
            - **attention_mask** -- Tensor of indices specifying which tokens should be attended to by the model (when
              `return_attention_mask=True` or if *"attention_mask"* is in `self.model_input_names` and if `text` is not
              `None`).
            - **pixel_values** -- Pixel values to be fed to a model. Returned when `images` is not `None`.
            - **pixel_values_videos** -- Pixel values of videos to be fed to a model. Returned when `videos` is not `None`.
            - **image_grid_thw** -- Tensor of image 3D grid in LLM. Returned when `images` is not `None`.
            - **video_grid_thw** -- Tensor of video 3D grid in LLM. Returned when `videos` is not `None`.
            - **num_frames** -- Tensor of number of frames for each videos in LLM. Returned when `videos` is not `None`.
        """
        output_kwargs = self._merge_kwargs(
            KeyeVL1_5ProcessorKwargs,
            tokenizer_init_kwargs=self.tokenizer.init_kwargs,
            **kwargs,
        )

        if images is not None:
            image_inputs = self.image_processor(images=images, return_tensors="pt")
            image_inputs["pixel_values"] = image_inputs["pixel_values"]
            image_grid_thw = image_inputs["image_grid_thw"]
        else:
            image_inputs = dict()
            image_grid_thw = None

        if videos is not None:
            num_videos = len(videos)
            videos_kwargs = output_kwargs["videos_kwargs"]
            batch_frame_types = videos_kwargs.get("frame_types", [None] * num_videos)
            batch_timestamps = videos_kwargs.get("timestamps", [None] * num_videos)

            video_inputs = self.video_processor(videos=videos, return_tensors="pt", videos_kwargs=videos_kwargs)
            slow_video_grid_thw = video_inputs["video_grid_thw"]
            fast_video_grid_thw = video_inputs["fast_video_grid_thw"]
            slow_video_grid_thw = slow_video_grid_thw if slow_video_grid_thw.numel() > 0 else None
            fast_video_grid_thw = fast_video_grid_thw if fast_video_grid_thw.numel() > 0 else None

            slow_pixel_values_videos = video_inputs["pixel_values_videos"]
            fast_pixel_values_videos = video_inputs["fast_pixel_values_videos"]
            slow_pixel_values_videos = slow_pixel_values_videos if slow_pixel_values_videos.numel() > 0 else None
            fast_pixel_values_videos = fast_pixel_values_videos if fast_pixel_values_videos.numel() > 0 else None

            num_frames = video_inputs["num_frames"]
        else:
            slow_video_grid_thw = None
            fast_video_grid_thw = None

        if not isinstance(text, list):
            text = [text]
        text = deepcopy(text)
        if image_grid_thw is not None:
            index = 0
            for i in range(len(text)):
                while self.image_token in text[i]:
                    image_place_holder_template = "<|placeholder|>" * (
                        image_grid_thw[index].prod() // self.image_processor.merge_size**2
                    )
                    text[i] = text[i].replace(
                        self.image_token,
                        image_place_holder_template,
                        1,
                    )
                    index += 1
                text[i] = text[i].replace("<|placeholder|>", self.image_token)

        pixel_values_videos = list()
        video_grid_thw = list()
        videos_inputs = dict()
        if slow_video_grid_thw is not None:
            slow_video_grid_thw = split_thw(slow_video_grid_thw)
            if fast_video_grid_thw is not None:
                fast_video_grid_thw = split_thw(fast_video_grid_thw)
            index = 0
            slow_index = 0
            fast_index = 0
            slow_pixels_index = 0
            fast_pixels_index = 0
            for i in range(len(text)):
                while self.video_token in text[i]:
                    video_place_holder_template = ""

                    for j in range(batch_frame_types[index].shape[-1]):
                        if batch_timestamps[index] is not None:  # If has timestamps
                            video_place_holder_template += self.frame_token + format(batch_timestamps[index][j], ".1f")
                        else:
                            video_place_holder_template += self.frame_token

                        # Current frame is slow frame
                        if batch_frame_types[index][j] == 0:
                            num_patches = int(slow_video_grid_thw[slow_index].prod())
                            video_place_holder_template += "<|placeholder|>" * (
                                num_patches // self.image_processor.merge_size**2
                            )
                            pixel_values_videos.append(
                                slow_pixel_values_videos[slow_pixels_index : slow_pixels_index + num_patches]
                            )
                            slow_pixels_index = slow_pixels_index + num_patches
                            video_grid_thw.append(slow_video_grid_thw[slow_index])
                            slow_index += 1

                        # Current frame is fast frame
                        elif batch_frame_types[index][j] == 1:
                            num_patches = int(fast_video_grid_thw[fast_index].prod())
                            video_place_holder_template += (
                                self.fast_start
                                + "<|placeholder|>" * (num_patches // self.image_processor.merge_size**2)
                                + self.fast_end
                            )
                            pixel_values_videos.append(
                                fast_pixel_values_videos[fast_pixels_index : fast_pixels_index + num_patches]
                            )
                            fast_pixels_index = fast_pixels_index + num_patches
                            video_grid_thw.append(fast_video_grid_thw[fast_index])
                            fast_index += 1
                    text[i] = text[i].replace(
                        self.video_token,
                        video_place_holder_template,
                        1,
                    )
                    index += 1
                text[i] = text[i].replace("<|placeholder|>", self.video_token)

            videos_inputs["pixel_values_videos"] = torch.cat(pixel_values_videos, dim=0)
            videos_inputs["video_grid_thw"] = merge_thw(video_grid_thw, num_frames)
            videos_inputs["num_frames"] = torch.LongTensor(num_frames)

        text_inputs = self.tokenizer(text, **output_kwargs["text_kwargs"])

        return BatchFeature(data={**text_inputs, **image_inputs, **videos_inputs})


__all__ = ["KeyeVL1_5Processor"]
