#                ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨
#           This file was automatically generated from src/transformers/models/keye_vl_1_5/modular_keye_vl_1_5.py.
#               Do NOT edit this file manually as any edits will be overwritten by the generation of
#             the file from the modular. If any change should be done, please apply the change to the
#                          modular_keye_vl_1_5.py file directly. One of our CI enforces this.
#                ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨
# coding=utf-8
# Copyright 2025 The Kwai Keye Team and The HuggingFace Inc. team. All rights reserved.
#
# This code is based on EleutherAI's GPT-NeoX library and the GPT-NeoX
# and OPT implementations in this library. It has been modified from its
# original forms to accommodate minor architectural differences compared
# to GPT-NeoX and OPT used by the Meta AI team that trained the model.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import os
from typing import Optional, Union

import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
from numpy.typing import NDArray

from ...image_processing_utils import BatchFeature
from ...image_utils import OPENAI_CLIP_MEAN, OPENAI_CLIP_STD, ImageInput
from ...models.qwen2.tokenization_qwen2_fast import Qwen2TokenizerFast
from ...processing_utils import ProcessingKwargs, ProcessorMixin, Unpack, VideosKwargs
from ...tokenization_utils_base import PreTokenizedInput, TextInput
from ...utils import add_start_docstrings, logging
from ...video_processing_utils import BASE_VIDEO_PROCESSOR_DOCSTRING
from ...video_utils import VideoInput
from .image_processing_keye_vl_1_5 import KeyeVL1_5ImageProcessor


logger = logging.get_logger(__name__)

try:
    from keye_vl_utils import BicubicVideoProcessor
except:
    BicubicVideoProcessor = None
    bicubic = None

if BicubicVideoProcessor is not None:
    try:
        bicubic = BicubicVideoProcessor()
    except:
        bicubic = None


class KeyeVL1_5VideosProcessorKwargs(VideosKwargs, total=False):
    fps: Optional[Union[list[float], float]]
    """
    the fps of the video.
    """
    width: Optional[Union[list[int], int]]
    """
    the width to resize in for slow frames.
    """
    height: Optional[Union[list[int], int]]
    """
    the height to resize in for slow frames.
    """
    fast_width: Optional[Union[list[int], int]]
    """
    the width to resize in for fast frames.
    """
    fast_height: Optional[Union[list[int], int]]
    """
    the height to resize in for fast frames.
    """
    timestamps: Optional[Union[list[torch.Tensor], torch.Tensor]]
    """
    used to mark the timestamp of each frame, the quantity is equal to the number of frames.
    """
    frame_types: Optional[Union[list[torch.Tensor], torch.Tensor]]
    """
    used to mark whether each frame is of type slow or fast, where 0 for alow and 1 for fast.
    """


class KeyeVL1_5ProcessorKwargs(ProcessingKwargs, total=False):
    videos_kwargs: KeyeVL1_5VideosProcessorKwargs
    _defaults = {
        "text_kwargs": {
            "padding": False,
        },
        "videos_kwargs": {"fps": 2.0},
    }


def select_slow_fast_frames(
    frames: torch.FloatTensor, frame_types: torch.LongTensor
) -> tuple[torch.FloatTensor, torch.FloatTensor]:
    """
    Selects frames from a tensor based on a mask list.

    Args:
        frames (torch.FloatTensor): A tensor of shape (nframes, channel, height, width).
        frame_types (torch.LongTensor): A int tensor of shape (nframes, ), 1 for fast frames and 0 for slow frames.

    Returns:
        Tuple[torch.FloatTensor, torch.FloatTensor]: A tuple containing two tensors:
            - slow_frames: Frames which the type is 0.
            - fast_frames: Frames where the type is 1.
    """
    nframes, _, _, _ = frames.shape
    if frame_types.shape[-1] != nframes:
        raise ValueError("Length of mask must be equal to the number of frames.")

    mask = frame_types == 0

    slow_frames = frames[mask]
    fast_frames = frames[~mask]

    return slow_frames, fast_frames


def split_thw(thw: torch.LongTensor) -> torch.LongTensor:
    """
    Split grid_thw in t dimension, the result tensor should like [[1, h, w],...]
    Example:

    ```python
    >>> thw = torch.LongTensor([[2, 10, 12], [3, 4, 6]])
    >>> split_thw(thw) -> torch.LongTensor([[1, 10, 12], [1, 10, 12], [1, 4, 6], [1, 4, 6], [1, 4, 6]])
    """
    if thw.dim() == 1:
        thw = thw.unsqueeze(0)

    clone = thw.clone()
    clone[:, 0] = 1
    return torch.repeat_interleave(clone, thw[:, 0], dim=0)


def merge_thw(
    thw: Union[torch.LongTensor, list[torch.LongTensor]],
    num_frames: Optional[list[int]] = None,
) -> torch.LongTensor:
    """
    Merge same grid_thw in t dimension, if num_frames is provided, may split adjacent identical values.
    Example:

    ```python
    >>> thw = torch.LongTensor([[1, 3, 4], [1, 3, 4], [1, 3, 4], [1, 23, 10], [1, 89, 18], [1, 9, 10], [1, 9, 10]])
    >>> num_frames = None
    >>> merge_thw(thw, num_frames) -> torch.LongTensor([3, 3, 4], [1, 23, 10], [1, 89, 18], [2, 9, 10]])

    >>> thw = torch.LongTensor([[1, 3, 4], [1, 3, 4], [1, 3, 4], [1, 23, 10], [1, 89, 18], [1, 9, 10], [1, 9, 10]])
    >>> num_frames = [2, 1, 3, 1]
    >>> merge_thw(thw, num_frames) -> torch.LongTensor([2, 3, 4], [1, 3, 4], [1, 23, 10], [1, 89, 18], [1, 9, 10], [1, 9, 10]])

    Args:
        thw (torch.LongTensor, List[torch.LongTensor]): A tensor of shape (N, 3) or a list of (3, ) tensor with lengths N, the value of t dimension is always 1.
        num_frames (List[int]): Indicates the number of frames in each video.

    Returns:
        torch.LongTensor: A tensor merged adjacent identical values.
    """

    if isinstance(thw, list):
        thw = torch.stack(thw, dim=0)

    assert thw.dim() == 2, thw.shape
    assert torch.all(thw[:, 0] == 1), thw

    if num_frames is None:
        mask = (thw[:-1] != thw[1:]).any(1)
        mask = F.pad(mask, (1, 0), value=True)

        indices = torch.where(mask)[0]
        append = torch.LongTensor([mask.shape[0]])
        count = torch.diff(indices, append=append).unsqueeze(-1)
        return torch.concat([count, thw[indices][:, 1:]], dim=1)

    assert thw.shape[0] == sum(num_frames), (thw.shape, num_frames)

    return torch.concat([merge_thw(part) for part in thw.split(num_frames, dim=0)], dim=0)


@add_start_docstrings(
    "Constructs a fast Keye-VL-1.5 image processor that dynamically resizes videos based on the original videos.",
    BASE_VIDEO_PROCESSOR_DOCSTRING,
    """
        min_pixels (`int`, *optional*, defaults to `56 * 56`):
            The min pixels of the image to resize the image.
        max_pixels (`int`, *optional*, defaults to `28 * 28 * 1280`):
            The max pixels of the image to resize the image.
        patch_size (`int`, *optional*, defaults to 14):
            The spacial patch size of the vision encoder.
        temporal_patch_size (`int`, *optional*, defaults to 1):
            The temporal patch size of the vision encoder.
        merge_size (`int`, *optional*, defaults to 2):
            The merge size of the vision encoder to llm encoder.
        min_frames (`int`, *optional*, defaults to 4):
            The minimum number of frames that can be sampled.
        max_frames (`int`, *optional*, defaults to 768):
            The maximum number of frames that can be sampled.
    """,
)
class KeyeVL1_5Processor(ProcessorMixin):
    r"""
    [`KeyeVL1_5Processor`] offers all the functionalities of [`KeyeVL1_5ImageProcessor`] and [`Qwen2TokenizerFast`]. See the
    [`~KeyeVL1_5Processor.__call__`] and [`~KeyeVL1_5Processor.decode`] for more information.
    Args:
        image_processor ([`KeyeVL1_5ImageProcessor`], *optional*):
            The image processor is a required input.
        tokenizer ([`Qwen2TokenizerFast`], *optional*):
            The tokenizer is a required input.
        chat_template (`str`, *optional*): A Jinja template which will be used to convert lists of messages
            in a chat into a tokenizable string.
    """

    attributes = ["image_processor", "tokenizer"]
    valid_kwargs = [
        "chat_template",
        "image_std",
        "min_pixels",
        "image_mean",
        "merge_size",
        "image_processor_type",
        "temporal_patch_size",
        "patch_size",
        "max_pixels",
    ]

    image_processor_class = "AutoImageProcessor"
    tokenizer_class = ("Qwen2Tokenizer", "Qwen2TokenizerFast")

    def __init__(
        self,
        image_processor: Optional[KeyeVL1_5ImageProcessor] = None,
        tokenizer: Optional[Qwen2TokenizerFast] = None,
        chat_template: Optional[str] = None,
        **kwargs,
    ):
        self.image_token = getattr(tokenizer, "image_token", "<|image_pad|>")
        self.video_token = getattr(tokenizer, "video_token", "<|video_pad|>")
        self.frame_token = getattr(tokenizer, "frame_token", "<|frame|>")
        self.fast_start = getattr(tokenizer, "fast_start", "<|fast_start|>")
        self.fast_end = getattr(tokenizer, "fast_end", "<|fast_end|>")

        self.merge_size = getattr(image_processor, "merge_size", 2)
        self.patch_size = getattr(image_processor, "patch_size", 14)
        self.min_pixels = getattr(image_processor, "min_pixels", 28 * 28 * 4)
        self.max_pixels = getattr(image_processor, "max_pixels", 28 * 28 * 1280)
        self.scale = (
            255 if not hasattr(image_processor, "rescale_factor") else int(round(1.0 / image_processor.rescale_factor))
        )
        self.image_mean = getattr(image_processor, "image_mean", OPENAI_CLIP_MEAN)
        self.image_std = getattr(image_processor, "image_std", OPENAI_CLIP_STD)

        if not isinstance(self.image_mean, (list, tuple)):
            self.image_mean = [self.image_mean] * 3
        if not isinstance(self.image_std, (list, tuple)):
            self.image_std = [self.image_std] * 3
        self.factor = self.merge_size * self.patch_size

        self.enable_fusion_op = bool(int(os.environ.get("ENABLE_FUSION_PROCESSOR_OP", 1))) and (bicubic is not None)

        if self.enable_fusion_op:
            logger.warning_once("Fusion op is enabled to processing videos.")
        else:
            logger.warning_once("Fusion op is not enabled to processing videos.")
        super().__init__(image_processor, tokenizer, chat_template=chat_template)

    def __call__(
        self,
        text: Union[TextInput, PreTokenizedInput, list[TextInput], list[PreTokenizedInput]] = None,
        images: Optional[ImageInput] = None,
        videos: Optional[VideoInput] = None,
        **kwargs: Unpack[KeyeVL1_5ProcessorKwargs],
    ) -> BatchFeature:
        """
        Main method to prepare for the model one or several sequences(s) and image(s). This method forwards the `text`
        and `kwargs` arguments to Qwen2TokenizerFast's [`~Qwen2TokenizerFast.__call__`] if `text` is not `None` to encode
        the text. To prepare the vision inputs, this method forwards the `vision_infos` and `kwrags` arguments to
        KeyeVL1_5ImageProcessor's [`~KeyeVL1_5ImageProcessor.__call__`] if `vision_infos` is not `None`.

        Args:
            text (`str`, `List[str]`, `List[List[str]]`):
                The sequence or batch of sequences to be encoded. Each sequence can be a string or a list of strings
                (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set
                `is_split_into_words=True` (to lift the ambiguity with a batch of sequences).
            images (`PIL.Image.Image`, `np.ndarray`, `torch.Tensor`, `List[PIL.Image.Image]`, `List[np.ndarray]`, `List[torch.Tensor]`):
                The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
                tensor. Both channels-first and channels-last formats are supported.
            videos (`np.ndarray`, `torch.Tensor`, `List[np.ndarray]`, `List[torch.Tensor]`):
                The image or batch of videos to be prepared. Each video can be a 4D NumPy array or PyTorch
                tensor, or a nested list of 3D frames. Both channels-first and channels-last formats are supported.
            return_tensors (`str` or [`~utils.TensorType`], *optional*):
                If set, will return tensors of a particular framework. Acceptable values are:
                - `'tf'`: Return TensorFlow `tf.constant` objects.
                - `'pt'`: Return PyTorch `torch.Tensor` objects.
                - `'np'`: Return NumPy `np.ndarray` objects.
                - `'jax'`: Return JAX `jnp.ndarray` objects.

        Returns:
            [`BatchFeature`]: A [`BatchFeature`] with the following fields:

            - **input_ids** -- Tensor of token ids to be fed to a model. Returned when `text` is not `None`.
            - **attention_mask** -- Tensor of indices specifying which tokens should be attended to by the model (when
              `return_attention_mask=True` or if *"attention_mask"* is in `self.model_input_names` and if `text` is not
              `None`).
            - **pixel_values** -- Pixel values to be fed to a model. Returned when `images` is not `None`.
            - **pixel_values_videos** -- Pixel values of videos to be fed to a model. Returned when `videos` is not `None`.
            - **image_grid_thw** -- Tensor of image 3D grid in LLM. Returned when `images` is not `None`.
            - **video_grid_thw** -- Tensor of video 3D grid in LLM. Returned when `videos` is not `None`.
            - **num_frames** -- Tensor of number of frames for each videos in LLM. Returned when `videos` is not `None`.
        """
        output_kwargs = self._merge_kwargs(
            KeyeVL1_5ProcessorKwargs,
            tokenizer_init_kwargs=self.tokenizer.init_kwargs,
            **kwargs,
        )

        if images is not None:
            image_inputs = self.image_processor(images=images, return_tensors="pt")
            image_inputs["pixel_values"] = image_inputs["pixel_values"]
            image_grid_thw = image_inputs["image_grid_thw"]
        else:
            image_inputs = dict()
            image_grid_thw = None

        num_frames = list()
        if videos is not None:
            batch_slow_frames = list()
            batch_fast_frames = list()

            videos_kwargs = output_kwargs["videos_kwargs"]
            num_videos = len(videos)
            batch_frame_types = videos_kwargs.get("frame_types", [None] * num_videos)
            batch_timestamps = videos_kwargs.get("timestamps", [None] * num_videos)
            batch_width = videos_kwargs.get("width", [None] * num_videos)
            batch_height = videos_kwargs.get("height", [None] * num_videos)
            batch_fast_width = videos_kwargs.get("fast_width", [None] * num_videos)
            batch_fast_height = videos_kwargs.get("fast_height", [None] * num_videos)

            for index, frames in enumerate(videos):
                if isinstance(frames, np.ndarray):
                    frames = torch.from_numpy(frames)
                nframes, channel, ori_height, ori_width = frames.shape
                num_frames.append(nframes)
                assert nframes > 0, "No frames in video"
                if batch_frame_types[index] is None:
                    # default to all slow frames
                    batch_frame_types[index] = torch.zeros((nframes,), dtype=torch.long)
                frame_types = batch_frame_types[index]
                if not self.enable_fusion_op:
                    slow_frames, fast_frames = select_slow_fast_frames(frames, frame_types)
                    has_fast_frames = fast_frames.shape[0] > 0
                    # resize slow frames
                    resized_width = batch_width[index]
                    resized_height = batch_height[index]
                    if resized_width is not None and resized_height is not None:
                        slow_frames = nn.functional.interpolate(
                            slow_frames,
                            [resized_height, resized_width],
                            mode="bilinear",
                            antialias=True,
                        ).float()
                        do_resize = False
                    else:
                        slow_frames = slow_frames.float()
                        do_resize = True

                    slow_video_inputs = self.image_processor(
                        images=None, videos=[slow_frames], **output_kwargs["images_kwargs"], do_resize=do_resize
                    )
                    slow_video_grid_thw = slow_video_inputs["video_grid_thw"]
                    batch_slow_frames.append(slow_video_inputs)

                    if has_fast_frames:
                        # TODO: shrink fast_frames
                        fast_resized_width = batch_fast_width[index]
                        fast_resized_height = batch_fast_height[index]
                        if fast_resized_width is not None and fast_resized_height is not None:
                            fast_frames = nn.functional.interpolate(
                                fast_frames,
                                [fast_resized_height, fast_resized_width],
                                mode="bilinear",
                                antialias=True,
                            ).float()
                            do_fast_resize = False
                        else:
                            fast_frames = fast_frames.float()
                            do_fast_resize = True

                        fast_video_inputs = self.image_processor(
                            images=None,
                            videos=[fast_frames],
                            **output_kwargs["images_kwargs"],
                            do_resize=do_fast_resize,
                        )
                        fast_video_grid_thw = fast_video_inputs["video_grid_thw"]
                        batch_fast_frames.append(fast_video_inputs)
                else:
                    slow_indices = (frame_types == 0).nonzero().flatten().tolist()
                    fast_indices = (frame_types == 1).nonzero().flatten().tolist()
                    has_fast_frames = len(fast_indices) > 0
                    resized_width = batch_width[index] or 0
                    resized_height = batch_height[index] or 0
                    fast_width = batch_fast_width[index] or 0
                    fast_height = batch_fast_height[index] or 0

                    slow_inputs = bicubic.interp(
                        frames,
                        nframes,
                        slow_indices,
                        ori_height,
                        ori_width,
                        resized_height,
                        resized_width,
                        patch=self.patch_size,
                        factor=self.factor,
                        min_pixels=self.min_pixels,
                        max_pixels=self.max_pixels,
                        scale=self.scale,
                        image_mean=self.image_mean,
                        image_std=self.image_std,
                    )
                    batch_slow_frames.append(slow_inputs)

                    if has_fast_frames:
                        fast_inputs = bicubic.interp(
                            frames,
                            nframes,
                            fast_indices,
                            ori_height,
                            ori_width,
                            fast_height,
                            fast_width,
                            patch=self.patch_size,
                            factor=self.factor,
                            min_pixels=self.min_pixels,
                            max_pixels=self.max_pixels,
                            scale=self.scale,
                            image_mean=self.image_mean,
                            image_std=self.image_std,
                        )
                        batch_fast_frames.append(fast_inputs)

            assert len(batch_slow_frames) > 0, "Slow frames should not be empty."
            slow_pixel_values_videos_list = [
                video["pixel_values_videos"] for video in batch_slow_frames if video is not None
            ]
            slow_video_grid_thw_list = [video["video_grid_thw"] for video in batch_slow_frames if video is not None]

            slow_pixel_values_videos = torch.concat(slow_pixel_values_videos_list, dim=0)
            slow_video_grid_thw = torch.concat(slow_video_grid_thw_list, dim=0)

            if has_fast_frames:
                fast_pixel_values_videos_list = [
                    video["pixel_values_videos"] for video in batch_fast_frames if video is not None
                ]
                fast_video_grid_thw_list = [
                    video["video_grid_thw"] for video in batch_fast_frames if video is not None
                ]

                fast_pixel_values_videos = torch.concat(fast_pixel_values_videos_list, dim=0)
                fast_video_grid_thw = torch.concat(fast_video_grid_thw_list, dim=0)
            else:
                fast_video_grid_thw = None
        else:
            slow_video_grid_thw = None
            fast_video_grid_thw = None

        if not isinstance(text, list):
            text = [text]
        if image_grid_thw is not None:
            index = 0
            for i in range(len(text)):
                while self.image_token in text[i]:
                    image_place_holder_tempale = "<|placeholder|>" * (
                        image_grid_thw[index].prod() // self.image_processor.merge_size**2
                    )
                    text[i] = text[i].replace(
                        self.image_token,
                        image_place_holder_tempale,
                        1,
                    )
                    index += 1
                text[i] = text[i].replace("<|placeholder|>", self.image_token)

        pixel_values_videos = list()
        video_grid_thw = list()
        videos_inputs = dict()
        if slow_video_grid_thw is not None:
            slow_video_grid_thw = split_thw(slow_video_grid_thw)
            if fast_video_grid_thw is not None:
                fast_video_grid_thw = split_thw(fast_video_grid_thw)
            index = 0
            slow_index = 0
            fast_index = 0
            slow_pixels_index = 0
            fast_pixels_index = 0
            for i in range(len(text)):
                while self.video_token in text[i]:
                    video_place_holder_tempale = ""

                    for j in range(batch_frame_types[index].shape[-1]):
                        if batch_timestamps[index] is not None:  # If has timestamps
                            video_place_holder_tempale += self.frame_token + format(batch_timestamps[index][j], ".1f")
                        else:
                            video_place_holder_tempale += self.frame_token

                        # Current frame is slow frame
                        if batch_frame_types[index][j] == 0:
                            num_patches = int(slow_video_grid_thw[slow_index].prod())
                            video_place_holder_tempale += "<|placeholder|>" * (
                                num_patches // self.image_processor.merge_size**2
                            )
                            pixel_values_videos.append(
                                slow_pixel_values_videos[slow_pixels_index : slow_pixels_index + num_patches]
                            )
                            slow_pixels_index = slow_pixels_index + num_patches
                            video_grid_thw.append(slow_video_grid_thw[slow_index])
                            slow_index += 1

                        # Current frame is fast frame
                        elif batch_frame_types[index][j] == 1:
                            num_patches = int(fast_video_grid_thw[fast_index].prod())
                            video_place_holder_tempale += (
                                self.fast_start
                                + "<|placeholder|>" * (num_patches // self.image_processor.merge_size**2)
                                + self.fast_end
                            )
                            pixel_values_videos.append(
                                fast_pixel_values_videos[fast_pixels_index : fast_pixels_index + num_patches]
                            )
                            fast_pixels_index = fast_pixels_index + num_patches
                            video_grid_thw.append(fast_video_grid_thw[fast_index])
                            fast_index += 1
                    text[i] = text[i].replace(
                        self.video_token,
                        video_place_holder_tempale,
                        1,
                    )
                    index += 1
                text[i] = text[i].replace("<|placeholder|>", self.video_token)

            videos_inputs["pixel_values_videos"] = torch.cat(pixel_values_videos, dim=0)
            videos_inputs["video_grid_thw"] = merge_thw(video_grid_thw, num_frames)
            videos_inputs["num_frames"] = torch.LongTensor(num_frames)

        text_inputs = self.tokenizer(text, **output_kwargs["text_kwargs"])

        return BatchFeature(data={**text_inputs, **image_inputs, **videos_inputs})

    def batch_decode(self, *args, **kwargs):
        """
        This method forwards all its arguments to Qwen2TokenizerFast's [`~PreTrainedTokenizer.batch_decode`]. Please
        refer to the docstring of this method for more information.
        """
        return self.tokenizer.batch_decode(*args, **kwargs)

    def decode(self, *args, **kwargs):
        """
        This method forwards all its arguments to Qwen2TokenizerFast's [`~PreTrainedTokenizer.decode`]. Please refer to
        the docstring of this method for more information.
        """
        return self.tokenizer.decode(*args, **kwargs)

    def post_process_image_text_to_text(
        self,
        generated_outputs: Union[torch.LongTensor, NDArray[np.long]],
        skip_special_tokens: bool = True,
        clean_up_tokenization_spaces: bool = False,
        **kwargs,
    ) -> list[str]:
        """
        Post-process the output of the model to decode the text.

        Args:
            generated_outputs (`torch.Tensor` or `np.ndarray`):
                The output of the model `generate` function. The output is expected to be a tensor of shape `(batch_size, sequence_length)`
                or `(sequence_length, )`.
            skip_special_tokens (`bool`, *optional*, defaults to `True`):
                Whether or not to remove special tokens in the output. Argument passed to the tokenizer's `batch_decode` method.
            Clean_up_tokenization_spaces (`bool`, *optional*, defaults to `False`):
                Whether or not to clean up the tokenization spaces. Argument passed to the tokenizer's `batch_decode` method.
            **kwargs:
                Additional arguments to be passed to the tokenizer's `batch_decode method`.

        Returns:
            `List[str]`: The decoded text.
        """
        return self.tokenizer.batch_decode(
            generated_outputs,
            skip_special_tokens=skip_special_tokens,
            clean_up_tokenization_spaces=clean_up_tokenization_spaces,
            **kwargs,
        )

    @property
    def model_input_names(self):
        tokenizer_input_names = self.tokenizer.model_input_names
        image_processor_input_names = self.image_processor.model_input_names
        names_from_processor = list(dict.fromkeys(tokenizer_input_names + image_processor_input_names))
        return names_from_processor


__all__ = ["KeyeVL1_5Processor"]
