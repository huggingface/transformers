#!/usr/bin/env python3
# coding=utf-8
# --------------------------------------------------------------------------------
# This file was automatically generated from the NGEN3 modular source.
# Do NOT edit this file manually as any changes will be overwritten.
# --------------------------------------------------------------------------------
"""
Enhanced Foundational Model Implementation with Instruct, Dense/MoE,
and Rotary Positional Embeddings for NGEN3.

This module implements the core modules for NGEN3:
  - NGEN3: The main model class defining embedding, transformer blocks, final layer norm,
    optional instruct dense layer, and output head.
  - Block, CausalSelfAttention, MLP, ExpertMLP, and MoEMLP: these implement the core
    transformer operations. The design mirrors the Google-uploaded style in the Gemma3 project.
"""

import math
import torch
import torch.nn as nn
import torch.nn.functional as F
from transformers.models.ngen3.configuration_ngen3 import NGEN3Config

def apply_rotary_pos_emb(q: torch.Tensor, k: torch.Tensor) -> tuple:
    """
    Applies rotary positional embeddings (RoPE) to query and key tensors.
    
    Args:
        q (torch.Tensor): Tensor of shape (B, n_head, T, head_dim)
        k (torch.Tensor): Tensor of shape (B, n_head, T, head_dim)
    
    Returns:
        Tuple of rotated (q, k)
    """
    T = q.size(-2)
    dim = q.size(-1)
    device = q.device
    inv_freq = 1.0 / (10000 ** (torch.arange(0, dim, 2, device=device).float() / dim))
    positions = torch.arange(T, device=device).float()
    sinusoid_inp = torch.einsum("i,j->ij", positions, inv_freq)
    sin = torch.sin(sinusoid_inp).unsqueeze(0).unsqueeze(0)
    cos = torch.cos(sinusoid_inp).unsqueeze(0).unsqueeze(0)
    q1, q2 = q[..., :dim//2], q[..., dim//2:]
    k1, k2 = k[..., :dim//2], k[..., dim//2:]
    q_rot = torch.cat((q1 * cos - q2 * sin, q2 * cos + q1 * sin), dim=-1)
    k_rot = torch.cat((k1 * cos - k2 * sin, k2 * cos + k1 * sin), dim=-1)
    return q_rot, k_rot

class NGEN3(nn.Module):
    def __init__(self, config: NGEN3Config):
        super().__init__()
        self.config = config
        self.tok_emb = nn.Embedding(config.vocab_size, config.n_embd)
        self.drop = nn.Dropout(config.dropout)
        self.blocks = nn.Sequential(*[Block(config) for _ in range(config.n_layer)])
        self.ln_f = nn.LayerNorm(config.n_embd)
        if config.instruct:
            self.instruct_dense = nn.Linear(config.n_embd, config.n_embd)
        self.head = nn.Linear(config.n_embd, config.vocab_size, bias=False)
        self.apply(self._init_weights)
    
    def _init_weights(self, module):
        if isinstance(module, (nn.Linear, nn.Embedding)):
            nn.init.normal_(module.weight, mean=0.0, std=0.02)
        if isinstance(module, nn.Linear) and module.bias is not None:
            nn.init.zeros_(module.bias)
    
    def forward(self, input_ids: torch.Tensor, instruct_mode: bool = False) -> torch.Tensor:
        x = self.tok_emb(input_ids)
        x = self.drop(x)
        x = self.blocks(x)
        x = self.ln_f(x)
        if self.config.instruct and instruct_mode:
            x = self.instruct_dense(x)
        logits = self.head(x)
        return logits

class Block(nn.Module):
    def __init__(self, config: NGEN3Config):
        super().__init__()
        self.ln1 = nn.LayerNorm(config.n_embd)
        self.attn = CausalSelfAttention(config)
        self.ln2 = nn.LayerNorm(config.n_embd)
        self.mlp = MoEMLP(config) if config.use_moe else MLP(config)
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        # Residual connection for attention
        residual = x
        x = self.ln1(x)
        x = self.attn(x)
        x = residual + x
        # Residual connection for feedforward
        residual = x
        x = self.ln2(x)
        x = self.mlp(x)
        return residual + x

class CausalSelfAttention(nn.Module):
    def __init__(self, config: NGEN3Config):
        super().__init__()
        assert config.n_embd % config.n_head == 0, "n_embd must be divisible by n_head"
        self.n_head = config.n_head
        self.head_dim = config.n_embd // config.n_head
        self.c_attn = nn.Linear(config.n_embd, 3 * config.n_embd)
        self.c_proj = nn.Linear(config.n_embd, config.n_embd)
        self.dropout = nn.Dropout(config.dropout)
        self.register_buffer("mask", torch.tril(torch.ones(config.block_size, config.block_size))
                             .view(1, 1, config.block_size, config.block_size))
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        B, T, C = x.size()
        qkv = self.c_attn(x)
        q, k, v = qkv.split(C, dim=2)
        q = q.view(B, T, self.n_head, self.head_dim).transpose(1, 2)
        k = k.view(B, T, self.n_head, self.head_dim).transpose(1, 2)
        v = v.view(B, T, self.n_head, self.head_dim).transpose(1, 2)
        q, k = apply_rotary_pos_emb(q, k)
        attn_scores = (q @ k.transpose(-2, -1)) / math.sqrt(self.head_dim)
        attn_scores = attn_scores.masked_fill(self.mask[:, :, :T, :T] == 0, float('-inf'))
        attn_probs = F.softmax(attn_scores, dim=-1)
        attn_probs = self.dropout(attn_probs)
        y = attn_probs @ v
        y = y.transpose(1, 2).contiguous().view(B, T, C)
        y = self.c_proj(y)
        return self.dropout(y)

class MLP(nn.Module):
    def __init__(self, config: NGEN3Config):
        super().__init__()
        self.fc1 = nn.Linear(config.n_embd, config.n_embd * 2)
        self.fc2 = nn.Linear(config.n_embd, config.n_embd)
        self.dropout = nn.Dropout(config.dropout)
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x_proj = self.fc1(x)
        x1, x2 = x_proj.chunk(2, dim=-1)
        x = F.silu(x1) * x2
        x = self.fc2(x)
        return self.dropout(x)

class ExpertMLP(nn.Module):
    def __init__(self, config: NGEN3Config):
        super().__init__()
        self.fc1 = nn.Linear(config.n_embd, config.n_embd * 2)
        self.fc2 = nn.Linear(config.n_embd, config.n_embd)
        self.dropout = nn.Dropout(config.dropout)
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x_proj = self.fc1(x)
        x1, x2 = x_proj.chunk(2, dim=-1)
        x = F.silu(x1) * x2
        x = self.fc2(x)
        return self.dropout(x)

class MoEMLP(nn.Module):
    def __init__(self, config: NGEN3Config):
        super().__init__()
        self.num_experts = config.num_experts
        self.experts = nn.ModuleList([ExpertMLP(config) for _ in range(self.num_experts)])
        self.gate = nn.Linear(config.n_embd, self.num_experts)
        self.dropout = nn.Dropout(config.dropout)
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        gate_scores = self.gate(x)  # (B, T, num_experts)
        gate_probs = F.softmax(gate_scores, dim=-1).unsqueeze(-1)  # (B, T, num_experts, 1)
        expert_outputs = torch.stack([expert(x) for expert in self.experts], dim=2)  # (B, T, num_experts, n_embd)
        output = torch.sum(gate_probs * expert_outputs, dim=2)
        return self.dropout(output)
